{"ast":null,"code":"import { USER_LOADING, USER_LOADED, AUTH_ERROR } from \"./../types\";\nimport { tokenConfig } from \"./tokenConfig\";\nimport axios from \"axios\";\n/*\n * this function to load the user with a specific token given from the frontend\n * in the request header cause JWT is stateless and we have to load the user\n * from the token in every refresh to the website\n * call this function in app.js before any render in useEffect\n */\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/api/users/user\", tokenConfig(getState)).then(res => {\n    dispatch(userLoadedSuccess(res.data));\n  }).catch(error => {\n    dispatch(userLoadedFailure(error));\n  });\n};\n\nconst userLoadedSuccess = user => {\n  return {\n    type: USER_LOADED,\n    payload: {\n      user\n    }\n  };\n};\n\nconst userLoadedFailure = error => {\n  return {\n    type: AUTH_ERROR,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/auth-actions/loadUser.js"],"names":["USER_LOADING","USER_LOADED","AUTH_ERROR","tokenConfig","axios","loadUser","dispatch","getState","type","get","then","res","userLoadedSuccess","data","catch","error","userLoadedFailure","user","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,WAAvB,EAAoCC,UAApC,QAAsD,YAAtD;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpDD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAER;AAAR,GAAD,CAAR;AAEAI,EAAAA,KAAK,CACFK,GADH,CACO,iBADP,EAC0BN,WAAW,CAACI,QAAD,CADrC,EAEGG,IAFH,CAEQC,GAAG,IAAI;AACXL,IAAAA,QAAQ,CAACM,iBAAiB,CAACD,GAAG,CAACE,IAAL,CAAlB,CAAR;AACD,GAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdT,IAAAA,QAAQ,CAACU,iBAAiB,CAACD,KAAD,CAAlB,CAAR;AACD,GAPH;AAQD,CAXM;;AAaP,MAAMH,iBAAiB,GAAGK,IAAI,IAAI;AAChC,SAAO;AACLT,IAAAA,IAAI,EAAEP,WADD;AAELiB,IAAAA,OAAO,EAAE;AAAED,MAAAA;AAAF;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMD,iBAAiB,GAAGD,KAAK,IAAI;AACjC,SAAO;AACLP,IAAAA,IAAI,EAAEN,UADD;AAELgB,IAAAA,OAAO,EAAE;AAAEH,MAAAA;AAAF;AAFJ,GAAP;AAID,CALD","sourcesContent":["import { USER_LOADING, USER_LOADED, AUTH_ERROR } from \"./../types\";\nimport { tokenConfig } from \"./tokenConfig\";\nimport axios from \"axios\";\n\n/*\n * this function to load the user with a specific token given from the frontend\n * in the request header cause JWT is stateless and we have to load the user\n * from the token in every refresh to the website\n * call this function in app.js before any render in useEffect\n */\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/api/users/user\", tokenConfig(getState))\n    .then(res => {\n      dispatch(userLoadedSuccess(res.data));\n    })\n    .catch(error => {\n      dispatch(userLoadedFailure(error));\n    });\n};\n\nconst userLoadedSuccess = user => {\n  return {\n    type: USER_LOADED,\n    payload: { user }\n  };\n};\n\nconst userLoadedFailure = error => {\n  return {\n    type: AUTH_ERROR,\n    payload: { error }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}