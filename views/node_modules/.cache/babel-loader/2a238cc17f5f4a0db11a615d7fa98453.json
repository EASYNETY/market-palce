{"ast":null,"code":"import { ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE } from \"../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nexport const addProduct = product => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    // send our data as a multipart/form-data instead of application/json\n    const formData = new FormData();\n\n    for (const x in product) {\n      if (x === \"productImage\") {\n        for (let i = 0; i < product.productImage.length; i++) {\n          formData.append(x, product.productImage[i]);\n        }\n      }\n\n      formData.append(\"productImage\", product.productImage);\n    }\n\n    formData.append(\"name\", product.name);\n    formData.append(\"description\", product.description);\n    formData.append(\"category\", product.category);\n    formData.append(\"price\", product.price);\n    formData.append(\"numberInStock\", product.numberInStock);\n    axios.post(\"/api/product/create\", formData, tokenConfig(getState)).then(res => {\n      let newProduct = res.data.product;\n      let successMessage = res.data.message;\n      dispatch(addProductSuccess(newProduct, successMessage));\n      resolve(successMessage);\n    }).catch(error => {\n      dispatch(addProductFailure(error.response));\n      reject(error.response.data.message);\n    });\n  });\n};\n\nconst addProductSuccess = (product, successMessage) => {\n  return {\n    type: ADD_PRODUCT_SUCCESS,\n    payload: {\n      product,\n      successMessage\n    }\n  };\n};\n\nconst addProductFailure = error => {\n  return {\n    type: ADD_PRODUCT_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/product-actions/addProductAction.js"],"names":["ADD_PRODUCT_SUCCESS","ADD_PRODUCT_FAILURE","axios","tokenConfig","addProduct","product","dispatch","getState","Promise","resolve","reject","formData","FormData","x","i","productImage","length","append","name","description","category","price","numberInStock","post","then","res","newProduct","data","successMessage","message","addProductSuccess","catch","error","addProductFailure","response","type","payload"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,mBAA9B,QAAyD,UAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3D,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AACA,SAAK,MAAMC,CAAX,IAAgBR,OAAhB,EAAyB;AACvB,UAAIQ,CAAC,KAAK,cAAV,EAA0B;AACxB,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACU,YAAR,CAAqBC,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;AACpDH,UAAAA,QAAQ,CAACM,MAAT,CAAgBJ,CAAhB,EAAmBR,OAAO,CAACU,YAAR,CAAqBD,CAArB,CAAnB;AACD;AACF;;AACDH,MAAAA,QAAQ,CAACM,MAAT,CAAgB,cAAhB,EAAgCZ,OAAO,CAACU,YAAxC;AACD;;AACDJ,IAAAA,QAAQ,CAACM,MAAT,CAAgB,MAAhB,EAAwBZ,OAAO,CAACa,IAAhC;AACAP,IAAAA,QAAQ,CAACM,MAAT,CAAgB,aAAhB,EAA+BZ,OAAO,CAACc,WAAvC;AACAR,IAAAA,QAAQ,CAACM,MAAT,CAAgB,UAAhB,EAA4BZ,OAAO,CAACe,QAApC;AACAT,IAAAA,QAAQ,CAACM,MAAT,CAAgB,OAAhB,EAAyBZ,OAAO,CAACgB,KAAjC;AACAV,IAAAA,QAAQ,CAACM,MAAT,CAAgB,eAAhB,EAAiCZ,OAAO,CAACiB,aAAzC;AAEApB,IAAAA,KAAK,CACFqB,IADH,CACQ,qBADR,EAC+BZ,QAD/B,EACyCR,WAAW,CAACI,QAAD,CADpD,EAEGiB,IAFH,CAEQC,GAAG,IAAI;AACX,UAAIC,UAAU,GAAGD,GAAG,CAACE,IAAJ,CAAStB,OAA1B;AACA,UAAIuB,cAAc,GAAGH,GAAG,CAACE,IAAJ,CAASE,OAA9B;AAEAvB,MAAAA,QAAQ,CAACwB,iBAAiB,CAACJ,UAAD,EAAaE,cAAb,CAAlB,CAAR;AACAnB,MAAAA,OAAO,CAACmB,cAAD,CAAP;AACD,KARH,EASGG,KATH,CASSC,KAAK,IAAI;AACd1B,MAAAA,QAAQ,CAAC2B,iBAAiB,CAACD,KAAK,CAACE,QAAP,CAAlB,CAAR;AACAxB,MAAAA,MAAM,CAACsB,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBE,OAArB,CAAN;AACD,KAZH;AAaD,GA9BM,CAAP;AA+BD,CAhCM;;AAkCP,MAAMC,iBAAiB,GAAG,CAACzB,OAAD,EAAUuB,cAAV,KAA6B;AACrD,SAAO;AACLO,IAAAA,IAAI,EAAEnC,mBADD;AAELoC,IAAAA,OAAO,EAAE;AACP/B,MAAAA,OADO;AAEPuB,MAAAA;AAFO;AAFJ,GAAP;AAOD,CARD;;AAUA,MAAMK,iBAAiB,GAAGD,KAAK,IAAI;AACjC,SAAO;AACLG,IAAAA,IAAI,EAAElC,mBADD;AAELmC,IAAAA,OAAO,EAAE;AACPJ,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPD","sourcesContent":["import { ADD_PRODUCT_SUCCESS, ADD_PRODUCT_FAILURE } from \"../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\n\nexport const addProduct = product => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    // send our data as a multipart/form-data instead of application/json\n    const formData = new FormData();\n    for (const x in product) {\n      if (x === \"productImage\") {\n        for (let i = 0; i < product.productImage.length; i++) {\n          formData.append(x, product.productImage[i]);\n        }\n      }\n      formData.append(\"productImage\", product.productImage);\n    }\n    formData.append(\"name\", product.name);\n    formData.append(\"description\", product.description);\n    formData.append(\"category\", product.category);\n    formData.append(\"price\", product.price);\n    formData.append(\"numberInStock\", product.numberInStock);\n\n    axios\n      .post(\"/api/product/create\", formData, tokenConfig(getState))\n      .then(res => {\n        let newProduct = res.data.product;\n        let successMessage = res.data.message;\n\n        dispatch(addProductSuccess(newProduct, successMessage));\n        resolve(successMessage);\n      })\n      .catch(error => {\n        dispatch(addProductFailure(error.response));\n        reject(error.response.data.message);\n      });\n  });\n};\n\nconst addProductSuccess = (product, successMessage) => {\n  return {\n    type: ADD_PRODUCT_SUCCESS,\n    payload: {\n      product,\n      successMessage\n    }\n  };\n};\n\nconst addProductFailure = error => {\n  return {\n    type: ADD_PRODUCT_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}