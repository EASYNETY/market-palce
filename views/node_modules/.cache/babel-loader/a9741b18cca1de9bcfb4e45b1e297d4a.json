{"ast":null,"code":"import { UPDATE_USER_SUCCESS, UPDATE_USER_FAILURE } from \"./../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"./tokenConfig\";\nexport const editUser = user => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    axios.put(\"/api/users/edit_account\", user, tokenConfig(getState)).then(res => {\n      const user = res.data.user;\n      const message = res.data.message;\n      const token = res.data.token;\n      dispatch(updateUserSuccess(user, message, token));\n      resolve(message);\n    }).catch(err => {\n      let errorMessge = err.response.data.message;\n      dispatch(updateUserFailure(errorMessge));\n      reject(errorMessge);\n    });\n  });\n};\n\nconst updateUserSuccess = (user, message, token) => {\n  return {\n    type: UPDATE_USER_SUCCESS,\n    payload: {\n      user,\n      message,\n      token\n    }\n  };\n};\n\nconst updateUserFailure = error => {\n  return {\n    type: UPDATE_USER_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"names":["UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","axios","tokenConfig","editUser","user","dispatch","getState","Promise","resolve","reject","put","then","res","data","message","token","updateUserSuccess","catch","err","errorMessge","response","updateUserFailure","type","payload","error"],"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/auth-actions/editUser.js"],"sourcesContent":["import { UPDATE_USER_SUCCESS, UPDATE_USER_FAILURE } from \"./../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"./tokenConfig\";\n\nexport const editUser = user => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    axios\n      .put(\"/api/users/edit_account\", user, tokenConfig(getState))\n      .then(res => {\n        const user = res.data.user;\n        const message = res.data.message;\n        const token = res.data.token;\n\n        dispatch(updateUserSuccess(user, message, token));\n        resolve(message);\n      })\n      .catch(err => {\n        let errorMessge = err.response.data.message;\n\n        dispatch(updateUserFailure(errorMessge));\n        reject(errorMessge);\n      });\n  });\n};\n\nconst updateUserSuccess = (user, message, token) => {\n  return {\n    type: UPDATE_USER_SUCCESS,\n    payload: {\n      user,\n      message,\n      token\n    }\n  };\n};\n\nconst updateUserFailure = error => {\n  return {\n    type: UPDATE_USER_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,mBAA9B,QAAyD,YAAzD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAGC,IAAI,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;EACtD,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCR,KAAK,CACFS,GADH,CACO,yBADP,EACkCN,IADlC,EACwCF,WAAW,CAACI,QAAD,CADnD,EAEGK,IAFH,CAEQC,GAAG,IAAI;MACX,MAAMR,IAAI,GAAGQ,GAAG,CAACC,IAAJ,CAAST,IAAtB;MACA,MAAMU,OAAO,GAAGF,GAAG,CAACC,IAAJ,CAASC,OAAzB;MACA,MAAMC,KAAK,GAAGH,GAAG,CAACC,IAAJ,CAASE,KAAvB;MAEAV,QAAQ,CAACW,iBAAiB,CAACZ,IAAD,EAAOU,OAAP,EAAgBC,KAAhB,CAAlB,CAAR;MACAP,OAAO,CAACM,OAAD,CAAP;IACD,CATH,EAUGG,KAVH,CAUSC,GAAG,IAAI;MACZ,IAAIC,WAAW,GAAGD,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBC,OAApC;MAEAT,QAAQ,CAACgB,iBAAiB,CAACF,WAAD,CAAlB,CAAR;MACAV,MAAM,CAACU,WAAD,CAAN;IACD,CAfH;EAgBD,CAjBM,CAAP;AAkBD,CAnBM;;AAqBP,MAAMH,iBAAiB,GAAG,CAACZ,IAAD,EAAOU,OAAP,EAAgBC,KAAhB,KAA0B;EAClD,OAAO;IACLO,IAAI,EAAEvB,mBADD;IAELwB,OAAO,EAAE;MACPnB,IADO;MAEPU,OAFO;MAGPC;IAHO;EAFJ,CAAP;AAQD,CATD;;AAWA,MAAMM,iBAAiB,GAAGG,KAAK,IAAI;EACjC,OAAO;IACLF,IAAI,EAAEtB,mBADD;IAELuB,OAAO,EAAE;MACPC;IADO;EAFJ,CAAP;AAMD,CAPD"},"metadata":{},"sourceType":"module"}