{"ast":null,"code":"import { UPDATE_CATEGORY_SUCCESS, UPDATE_CATEGORY_FAILURE } from \"./../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nexport const updateCategory = (id, category) => (dispatch, getState) => {\n  // will return Promise so we can handle success and error message\n  return new Promise((resolve, reject) => {\n    axios.put(`/api/category/${id}/update`, category, tokenConfig(getState)).then(res => {\n      let updatedCategory = res.data.category;\n      let successMessage = res.data.message;\n      dispatch(updateCategorySuccess(id, updatedCategory, successMessage));\n      resolve(successMessage);\n    }).catch(error => {\n      let errorMessage = error.response.data.message;\n      dispatch(updateCategoryFailure(errorMessage));\n      reject(errorMessage);\n    });\n  });\n};\n\nconst updateCategorySuccess = (id, newCategory, successMessage) => {\n  return {\n    type: UPDATE_CATEGORY_SUCCESS,\n    payload: {\n      id,\n      newCategory,\n      successMessage\n    }\n  };\n};\n\nconst updateCategoryFailure = error => {\n  return {\n    type: UPDATE_CATEGORY_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/category-actions/updateCategoryAction.js"],"names":["UPDATE_CATEGORY_SUCCESS","UPDATE_CATEGORY_FAILURE","axios","tokenConfig","updateCategory","id","category","dispatch","getState","Promise","resolve","reject","put","then","res","updatedCategory","data","successMessage","message","updateCategorySuccess","catch","error","errorMessage","response","updateCategoryFailure","newCategory","type","payload"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,uBAAlC,QAAiE,YAAjE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,6BAA5B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAkB,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtE;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,IAAAA,KAAK,CACFU,GADH,CACQ,iBAAgBP,EAAG,SAD3B,EACqCC,QADrC,EAC+CH,WAAW,CAACK,QAAD,CAD1D,EAEGK,IAFH,CAEQC,GAAG,IAAI;AACX,UAAIC,eAAe,GAAGD,GAAG,CAACE,IAAJ,CAASV,QAA/B;AACA,UAAIW,cAAc,GAAGH,GAAG,CAACE,IAAJ,CAASE,OAA9B;AAEAX,MAAAA,QAAQ,CAACY,qBAAqB,CAACd,EAAD,EAAKU,eAAL,EAAsBE,cAAtB,CAAtB,CAAR;AACAP,MAAAA,OAAO,CAACO,cAAD,CAAP;AACD,KARH,EASGG,KATH,CASSC,KAAK,IAAI;AACd,UAAIC,YAAY,GAAGD,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBE,OAAvC;AAEAX,MAAAA,QAAQ,CAACiB,qBAAqB,CAACF,YAAD,CAAtB,CAAR;AACAX,MAAAA,MAAM,CAACW,YAAD,CAAN;AACD,KAdH;AAeD,GAhBM,CAAP;AAiBD,CAnBM;;AAqBP,MAAMH,qBAAqB,GAAG,CAACd,EAAD,EAAKoB,WAAL,EAAkBR,cAAlB,KAAqC;AACjE,SAAO;AACLS,IAAAA,IAAI,EAAE1B,uBADD;AAEL2B,IAAAA,OAAO,EAAE;AACPtB,MAAAA,EADO;AAEPoB,MAAAA,WAFO;AAGPR,MAAAA;AAHO;AAFJ,GAAP;AAQD,CATD;;AAWA,MAAMO,qBAAqB,GAAGH,KAAK,IAAI;AACrC,SAAO;AACLK,IAAAA,IAAI,EAAEzB,uBADD;AAEL0B,IAAAA,OAAO,EAAE;AACPN,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPD","sourcesContent":["import { UPDATE_CATEGORY_SUCCESS, UPDATE_CATEGORY_FAILURE } from \"./../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\n\nexport const updateCategory = (id, category) => (dispatch, getState) => {\n  // will return Promise so we can handle success and error message\n  return new Promise((resolve, reject) => {\n    axios\n      .put(`/api/category/${id}/update`, category, tokenConfig(getState))\n      .then(res => {\n        let updatedCategory = res.data.category;\n        let successMessage = res.data.message;\n\n        dispatch(updateCategorySuccess(id, updatedCategory, successMessage));\n        resolve(successMessage);\n      })\n      .catch(error => {\n        let errorMessage = error.response.data.message;\n\n        dispatch(updateCategoryFailure(errorMessage));\n        reject(errorMessage);\n      });\n  });\n};\n\nconst updateCategorySuccess = (id, newCategory, successMessage) => {\n  return {\n    type: UPDATE_CATEGORY_SUCCESS,\n    payload: {\n      id,\n      newCategory,\n      successMessage\n    }\n  };\n};\n\nconst updateCategoryFailure = error => {\n  return {\n    type: UPDATE_CATEGORY_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}