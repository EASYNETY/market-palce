{"ast":null,"code":"import { ADD_ADDRESS_SUCCESS, ADD_ADDRESS_FAILURE } from \"../types\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nimport axios from \"axios\";\nexport const addAddress = address => (dispatch, getState) => {\n  let params = {\n    action: \"add\"\n  }; //api/address?action=add\n\n  return new Promise((resolve, reject) => {\n    axios.post(\"/api/address\", address, tokenConfig(getState, params)).then(res => {\n      let successMessage = res.data.message;\n      let address = res.data.address;\n      dispatch(addAddressSuccess(address, successMessage));\n      resolve(successMessage);\n    }).catch(error => {\n      dispatch(addAddressFailure(error.response.data.message));\n      reject(error.response.data.message);\n    });\n  });\n};\n\nconst addAddressSuccess = (address, successMessage) => {\n  return {\n    type: ADD_ADDRESS_SUCCESS,\n    payload: {\n      address,\n      successMessage\n    }\n  };\n};\n\nconst addAddressFailure = error => {\n  return {\n    type: ADD_ADDRESS_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/address-actions/addAddressAction.js"],"names":["ADD_ADDRESS_SUCCESS","ADD_ADDRESS_FAILURE","tokenConfig","axios","addAddress","address","dispatch","getState","params","action","Promise","resolve","reject","post","then","res","successMessage","data","message","addAddressSuccess","catch","error","addAddressFailure","response","type","payload"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,mBAA9B,QAAyD,UAAzD;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAGC,OAAO,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3D,MAAIC,MAAM,GAAG;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAb,CAD2D,CAE3D;;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,IAAAA,KAAK,CACFU,IADH,CACQ,cADR,EACwBR,OADxB,EACiCH,WAAW,CAACK,QAAD,EAAWC,MAAX,CAD5C,EAEGM,IAFH,CAEQC,GAAG,IAAI;AACX,UAAIC,cAAc,GAAGD,GAAG,CAACE,IAAJ,CAASC,OAA9B;AACA,UAAIb,OAAO,GAAGU,GAAG,CAACE,IAAJ,CAASZ,OAAvB;AACAC,MAAAA,QAAQ,CAACa,iBAAiB,CAACd,OAAD,EAAUW,cAAV,CAAlB,CAAR;AACAL,MAAAA,OAAO,CAACK,cAAD,CAAP;AACD,KAPH,EAQGI,KARH,CAQSC,KAAK,IAAI;AACdf,MAAAA,QAAQ,CAACgB,iBAAiB,CAACD,KAAK,CAACE,QAAN,CAAeN,IAAf,CAAoBC,OAArB,CAAlB,CAAR;AACAN,MAAAA,MAAM,CAACS,KAAK,CAACE,QAAN,CAAeN,IAAf,CAAoBC,OAArB,CAAN;AACD,KAXH;AAYD,GAbM,CAAP;AAcD,CAjBM;;AAmBP,MAAMC,iBAAiB,GAAG,CAACd,OAAD,EAAUW,cAAV,KAA6B;AACrD,SAAO;AACLQ,IAAAA,IAAI,EAAExB,mBADD;AAELyB,IAAAA,OAAO,EAAE;AACPpB,MAAAA,OADO;AAEPW,MAAAA;AAFO;AAFJ,GAAP;AAOD,CARD;;AAUA,MAAMM,iBAAiB,GAAGD,KAAK,IAAI;AACjC,SAAO;AACLG,IAAAA,IAAI,EAAEvB,mBADD;AAELwB,IAAAA,OAAO,EAAE;AACPJ,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPD","sourcesContent":["import { ADD_ADDRESS_SUCCESS, ADD_ADDRESS_FAILURE } from \"../types\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nimport axios from \"axios\";\n\nexport const addAddress = address => (dispatch, getState) => {\n  let params = { action: \"add\" };\n  //api/address?action=add\n  return new Promise((resolve, reject) => {\n    axios\n      .post(\"/api/address\", address, tokenConfig(getState, params))\n      .then(res => {\n        let successMessage = res.data.message;\n        let address = res.data.address;\n        dispatch(addAddressSuccess(address, successMessage));\n        resolve(successMessage);\n      })\n      .catch(error => {\n        dispatch(addAddressFailure(error.response.data.message));\n        reject(error.response.data.message);\n      });\n  });\n};\n\nconst addAddressSuccess = (address, successMessage) => {\n  return {\n    type: ADD_ADDRESS_SUCCESS,\n    payload: {\n      address,\n      successMessage\n    }\n  };\n};\n\nconst addAddressFailure = error => {\n  return {\n    type: ADD_ADDRESS_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}