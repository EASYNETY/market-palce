{"ast":null,"code":"/**\n * This function to Setup config/headers and token\n * it gets the token from our main state and attach it to the header\n */\nexport const tokenConfig = function () {\n  let getState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let optionalParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // Get token from localstorage\n  const token = getState ? getState().userrr.token : null;\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    params: {}\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  if (optionalParams) {\n    config.params = optionalParams;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/auth-actions/tokenConfig.js"],"names":["tokenConfig","getState","optionalParams","token","userrr","config","headers","params"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAW,GAAG,YAA4C;AAAA,MAA3CC,QAA2C,uEAAhC,IAAgC;AAAA,MAA1BC,cAA0B,uEAAT,IAAS;AACrE;AACA,QAAMC,KAAK,GAAGF,QAAQ,GAAGA,QAAQ,GAAGG,MAAX,CAAkBD,KAArB,GAA6B,IAAnD;AAEA,QAAME,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KADI;AAIbC,IAAAA,MAAM,EAAE;AAJK,GAAf,CAJqE,CAWrE;;AACA,MAAIJ,KAAJ,EAAW;AACTE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACD;;AAED,MAAID,cAAJ,EAAoB;AAClBG,IAAAA,MAAM,CAACE,MAAP,GAAgBL,cAAhB;AACD;;AAED,SAAOG,MAAP;AACD,CArBM","sourcesContent":["/**\n * This function to Setup config/headers and token\n * it gets the token from our main state and attach it to the header\n */\nexport const tokenConfig = (getState = null, optionalParams = null) => {\n  // Get token from localstorage\n  const token = getState ? getState().userrr.token : null;\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    params: {}\n  };\n\n  // If token, add to headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  if (optionalParams) {\n    config.params = optionalParams;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}