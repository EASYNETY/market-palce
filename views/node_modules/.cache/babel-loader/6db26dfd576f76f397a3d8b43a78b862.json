{"ast":null,"code":"import { ORDER_DELIVERED_SUCCESS, ORDER_DELIVERED_FAILURE } from \"../types\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nimport axios from \"axios\";\nexport const markOrderDelivered = orderId => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    let params = {\n      orderId\n    };\n    axios.get(\"/api/order/ordersToDeliver/markAsDelivered\", tokenConfig(getState, params)).then(res => {\n      let successMessage = res.data.message;\n      let order = res.data.order;\n      let deliveredItem = res.data.deliveredItem;\n      dispatch(markDeliveredSuccess(order, deliveredItem, successMessage));\n      resolve(successMessage);\n    }).catch(err => {\n      let errorMessge = err.response.data.message;\n      dispatch(markDeliveredFailure(errorMessge));\n      reject(errorMessge);\n    });\n  });\n};\n\nconst markDeliveredSuccess = (order, deliveredItem, message) => {\n  return {\n    type: ORDER_DELIVERED_SUCCESS,\n    payload: {\n      order,\n      deliveredItem,\n      message\n    }\n  };\n};\n\nconst markDeliveredFailure = error => {\n  return {\n    type: ORDER_DELIVERED_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/order-actions/markOrderDelivered.js"],"names":["ORDER_DELIVERED_SUCCESS","ORDER_DELIVERED_FAILURE","tokenConfig","axios","markOrderDelivered","orderId","dispatch","getState","Promise","resolve","reject","params","get","then","res","successMessage","data","message","order","deliveredItem","markDeliveredSuccess","catch","err","errorMessge","response","markDeliveredFailure","type","payload","error"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,uBAAlC,QAAiE,UAAjE;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,kBAAkB,GAAGC,OAAO,IAAI,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACnE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAIC,MAAM,GAAG;AAAEN,MAAAA;AAAF,KAAb;AAEAF,IAAAA,KAAK,CACFS,GADH,CACO,4CADP,EACqDV,WAAW,CAACK,QAAD,EAAWI,MAAX,CADhE,EAEGE,IAFH,CAEQC,GAAG,IAAI;AACX,UAAIC,cAAc,GAAGD,GAAG,CAACE,IAAJ,CAASC,OAA9B;AACA,UAAIC,KAAK,GAAGJ,GAAG,CAACE,IAAJ,CAASE,KAArB;AACA,UAAIC,aAAa,GAAGL,GAAG,CAACE,IAAJ,CAASG,aAA7B;AAEAb,MAAAA,QAAQ,CAACc,oBAAoB,CAACF,KAAD,EAAQC,aAAR,EAAuBJ,cAAvB,CAArB,CAAR;AACAN,MAAAA,OAAO,CAACM,cAAD,CAAP;AACD,KATH,EAUGM,KAVH,CAUSC,GAAG,IAAI;AACZ,UAAIC,WAAW,GAAGD,GAAG,CAACE,QAAJ,CAAaR,IAAb,CAAkBC,OAApC;AAEAX,MAAAA,QAAQ,CAACmB,oBAAoB,CAACF,WAAD,CAArB,CAAR;AACAb,MAAAA,MAAM,CAACa,WAAD,CAAN;AACD,KAfH;AAgBD,GAnBM,CAAP;AAoBD,CArBM;;AAuBP,MAAMH,oBAAoB,GAAG,CAACF,KAAD,EAAQC,aAAR,EAAuBF,OAAvB,KAAmC;AAC9D,SAAO;AACLS,IAAAA,IAAI,EAAE1B,uBADD;AAEL2B,IAAAA,OAAO,EAAE;AAAET,MAAAA,KAAF;AAASC,MAAAA,aAAT;AAAwBF,MAAAA;AAAxB;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMQ,oBAAoB,GAAGG,KAAK,IAAI;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAEzB,uBADD;AAEL0B,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAFJ,GAAP;AAID,CALD","sourcesContent":["import { ORDER_DELIVERED_SUCCESS, ORDER_DELIVERED_FAILURE } from \"../types\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nimport axios from \"axios\";\n\nexport const markOrderDelivered = orderId => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    let params = { orderId };\n\n    axios\n      .get(\"/api/order/ordersToDeliver/markAsDelivered\", tokenConfig(getState, params))\n      .then(res => {\n        let successMessage = res.data.message;\n        let order = res.data.order;\n        let deliveredItem = res.data.deliveredItem;\n\n        dispatch(markDeliveredSuccess(order, deliveredItem, successMessage));\n        resolve(successMessage);\n      })\n      .catch(err => {\n        let errorMessge = err.response.data.message;\n\n        dispatch(markDeliveredFailure(errorMessge));\n        reject(errorMessge);\n      });\n  });\n};\n\nconst markDeliveredSuccess = (order, deliveredItem, message) => {\n  return {\n    type: ORDER_DELIVERED_SUCCESS,\n    payload: { order, deliveredItem, message }\n  };\n};\n\nconst markDeliveredFailure = error => {\n  return {\n    type: ORDER_DELIVERED_FAILURE,\n    payload: { error }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}