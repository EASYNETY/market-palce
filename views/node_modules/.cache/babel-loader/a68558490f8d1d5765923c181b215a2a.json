{"ast":null,"code":"import { PLACED_ORDER_SUCCESS, PLACED_ORDER_FAILURE } from \"../types\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nimport axios from \"axios\";\nexport const placeOrder = () => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    axios.get(\"/api/order/orderSuccess\", tokenConfig(getState)).then(res => {\n      let successMessage = res.data.message;\n      let cart = res.data.cart;\n      dispatch(placeOrderSuccess(cart, successMessage));\n      resolve(successMessage);\n    }).catch(err => {\n      let errorMessge = err.response.data.message;\n      dispatch(placeOrderFailure(errorMessge));\n      reject(errorMessge);\n    });\n  });\n};\n\nconst placeOrderSuccess = (cart, message) => {\n  return {\n    type: PLACED_ORDER_SUCCESS,\n    payload: {\n      cart,\n      message\n    }\n  };\n};\n\nconst placeOrderFailure = error => {\n  return {\n    type: PLACED_ORDER_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/order-actions/placeOrderAction.js"],"names":["PLACED_ORDER_SUCCESS","PLACED_ORDER_FAILURE","tokenConfig","axios","placeOrder","dispatch","getState","Promise","resolve","reject","get","then","res","successMessage","data","message","cart","placeOrderSuccess","catch","err","errorMessge","response","placeOrderFailure","type","payload","error"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,oBAA/B,QAA2D,UAA3D;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACtD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,KAAK,CACFO,GADH,CACO,yBADP,EACkCR,WAAW,CAACI,QAAD,CAD7C,EAEGK,IAFH,CAEQC,GAAG,IAAI;AACX,UAAIC,cAAc,GAAGD,GAAG,CAACE,IAAJ,CAASC,OAA9B;AACA,UAAIC,IAAI,GAAGJ,GAAG,CAACE,IAAJ,CAASE,IAApB;AACAX,MAAAA,QAAQ,CAACY,iBAAiB,CAACD,IAAD,EAAOH,cAAP,CAAlB,CAAR;AACAL,MAAAA,OAAO,CAACK,cAAD,CAAP;AACD,KAPH,EAQGK,KARH,CAQSC,GAAG,IAAI;AACZ,UAAIC,WAAW,GAAGD,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBC,OAApC;AACAV,MAAAA,QAAQ,CAACiB,iBAAiB,CAACF,WAAD,CAAlB,CAAR;AACAX,MAAAA,MAAM,CAACW,WAAD,CAAN;AACD,KAZH;AAaD,GAdM,CAAP;AAeD,CAhBM;;AAkBP,MAAMH,iBAAiB,GAAG,CAACD,IAAD,EAAOD,OAAP,KAAmB;AAC3C,SAAO;AACLQ,IAAAA,IAAI,EAAEvB,oBADD;AAELwB,IAAAA,OAAO,EAAE;AAAER,MAAAA,IAAF;AAAQD,MAAAA;AAAR;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMO,iBAAiB,GAAGG,KAAK,IAAI;AACjC,SAAO;AACLF,IAAAA,IAAI,EAAEtB,oBADD;AAELuB,IAAAA,OAAO,EAAE;AAAEC,MAAAA;AAAF;AAFJ,GAAP;AAID,CALD","sourcesContent":["import { PLACED_ORDER_SUCCESS, PLACED_ORDER_FAILURE } from \"../types\";\nimport { tokenConfig } from \"../auth-actions/tokenConfig\";\nimport axios from \"axios\";\n\nexport const placeOrder = () => (dispatch, getState) => {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(\"/api/order/orderSuccess\", tokenConfig(getState))\n      .then(res => {\n        let successMessage = res.data.message;\n        let cart = res.data.cart;\n        dispatch(placeOrderSuccess(cart, successMessage));\n        resolve(successMessage);\n      })\n      .catch(err => {\n        let errorMessge = err.response.data.message;\n        dispatch(placeOrderFailure(errorMessge));\n        reject(errorMessge);\n      });\n  });\n};\n\nconst placeOrderSuccess = (cart, message) => {\n  return {\n    type: PLACED_ORDER_SUCCESS,\n    payload: { cart, message }\n  };\n};\n\nconst placeOrderFailure = error => {\n  return {\n    type: PLACED_ORDER_FAILURE,\n    payload: { error }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}