{"ast":null,"code":"import { REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS } from \"./../types\";\nimport axios from \"axios\";\nexport const registerNewUser = user => dispatch => {\n  return new Promise((resolve, reject) => {\n    axios.post(\"/api/users/signup\", user).then(res => {\n      const user = res.data.user;\n      const message = res.data.message;\n      const token = res.data.token;\n      dispatch(registerUserSuccess(user, message, token));\n      resolve(message);\n    }).catch(err => {\n      let errorMessge = err.response.data.message;\n      dispatch(registerUserFailure(errorMessge));\n      reject(errorMessge);\n    });\n  });\n};\n\nconst registerUserSuccess = (user, successMessage, token) => {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: {\n      user,\n      successMessage,\n      token\n    }\n  };\n};\n\nconst registerUserFailure = error => {\n  return {\n    type: REGISTER_USER_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/auth-actions/registerNewUser.js"],"names":["REGISTER_USER_FAILURE","REGISTER_USER_SUCCESS","axios","registerNewUser","user","dispatch","Promise","resolve","reject","post","then","res","data","message","token","registerUserSuccess","catch","err","errorMessge","response","registerUserFailure","successMessage","type","payload","error"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,qBAAhC,QAA6D,YAA7D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,eAAe,GAAGC,IAAI,IAAIC,QAAQ,IAAI;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCN,IAAAA,KAAK,CACFO,IADH,CACQ,mBADR,EAC6BL,IAD7B,EAEGM,IAFH,CAEQC,GAAG,IAAI;AACX,YAAMP,IAAI,GAAGO,GAAG,CAACC,IAAJ,CAASR,IAAtB;AACA,YAAMS,OAAO,GAAGF,GAAG,CAACC,IAAJ,CAASC,OAAzB;AACA,YAAMC,KAAK,GAAGH,GAAG,CAACC,IAAJ,CAASE,KAAvB;AAEAT,MAAAA,QAAQ,CAACU,mBAAmB,CAACX,IAAD,EAAOS,OAAP,EAAgBC,KAAhB,CAApB,CAAR;AACAP,MAAAA,OAAO,CAACM,OAAD,CAAP;AACD,KATH,EAUGG,KAVH,CAUSC,GAAG,IAAI;AACZ,UAAIC,WAAW,GAAGD,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBC,OAApC;AAEAR,MAAAA,QAAQ,CAACe,mBAAmB,CAACF,WAAD,CAApB,CAAR;AACAV,MAAAA,MAAM,CAACU,WAAD,CAAN;AACD,KAfH;AAgBD,GAjBM,CAAP;AAkBD,CAnBM;;AAqBP,MAAMH,mBAAmB,GAAG,CAACX,IAAD,EAAOiB,cAAP,EAAuBP,KAAvB,KAAiC;AAC3D,SAAO;AACLQ,IAAAA,IAAI,EAAErB,qBADD;AAELsB,IAAAA,OAAO,EAAE;AACPnB,MAAAA,IADO;AAEPiB,MAAAA,cAFO;AAGPP,MAAAA;AAHO;AAFJ,GAAP;AAQD,CATD;;AAWA,MAAMM,mBAAmB,GAAGI,KAAK,IAAI;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAEtB,qBADD;AAELuB,IAAAA,OAAO,EAAE;AACPC,MAAAA;AADO;AAFJ,GAAP;AAMD,CAPD","sourcesContent":["import { REGISTER_USER_FAILURE, REGISTER_USER_SUCCESS } from \"./../types\";\nimport axios from \"axios\";\n\nexport const registerNewUser = user => dispatch => {\n  return new Promise((resolve, reject) => {\n    axios\n      .post(\"/api/users/signup\", user)\n      .then(res => {\n        const user = res.data.user;\n        const message = res.data.message;\n        const token = res.data.token;\n\n        dispatch(registerUserSuccess(user, message, token));\n        resolve(message);\n      })\n      .catch(err => {\n        let errorMessge = err.response.data.message;\n\n        dispatch(registerUserFailure(errorMessge));\n        reject(errorMessge);\n      });\n  });\n};\n\nconst registerUserSuccess = (user, successMessage, token) => {\n  return {\n    type: REGISTER_USER_SUCCESS,\n    payload: {\n      user,\n      successMessage,\n      token\n    }\n  };\n};\n\nconst registerUserFailure = error => {\n  return {\n    type: REGISTER_USER_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}