{"ast":null,"code":"import { UPDATE_PRODUCT_SUCCESS, UPDATE_PRODUCT_FAILURE } from \"./../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"./../auth-actions/tokenConfig\";\nexport const updateProduct = (id, product) => (dispatch, getState) => {\n  return new Promise((reslove, reject) => {\n    // send our data as a multipart/form-data instead of application/json\n    const formData = new FormData();\n\n    for (const x in product) {\n      if (x === \"productImage\") {\n        for (let i = 0; i < product.productImage.length; i++) {\n          formData.append(x, product.productImage[i]);\n        }\n      }\n\n      formData.append(\"productImage\", product.productImage);\n    }\n\n    formData.append(\"name\", product.name);\n    formData.append(\"description\", product.description);\n    formData.append(\"category\", product.category);\n    formData.append(\"price\", product.price);\n    formData.append(\"numberInStock\", product.numberInStock);\n    axios.post(`/api/product/${id}/update`, formData, tokenConfig(getState)).then(res => {\n      let newProduct = res.data.product;\n      let successMessage = res.data.message;\n      dispatch(updateProductSuccess(id, newProduct, successMessage));\n      reslove(successMessage);\n    }).catch(err => {\n      let errorMessage = err.response.data.message;\n      dispatch(updateProductFailure(errorMessage));\n      reject(errorMessage);\n    });\n  });\n};\n\nconst updateProductSuccess = (id, newProduct, successMessage) => {\n  return {\n    type: UPDATE_PRODUCT_SUCCESS,\n    payload: {\n      id,\n      newProduct,\n      successMessage\n    }\n  };\n};\n\nconst updateProductFailure = error => {\n  return {\n    type: UPDATE_PRODUCT_FAILURE,\n    payload: {\n      error\n    }\n  };\n};","map":{"version":3,"names":["UPDATE_PRODUCT_SUCCESS","UPDATE_PRODUCT_FAILURE","axios","tokenConfig","updateProduct","id","product","dispatch","getState","Promise","reslove","reject","formData","FormData","x","i","productImage","length","append","name","description","category","price","numberInStock","post","then","res","newProduct","data","successMessage","message","updateProductSuccess","catch","err","errorMessage","response","updateProductFailure","type","payload","error"],"sources":["C:/Users/123/Documents/Easynet/Marketplace/m1/views/src/redux/actions/product-actions/updateProductAction.js"],"sourcesContent":["import { UPDATE_PRODUCT_SUCCESS, UPDATE_PRODUCT_FAILURE } from \"./../types\";\nimport axios from \"axios\";\nimport { tokenConfig } from \"./../auth-actions/tokenConfig\";\n\nexport const updateProduct = (id, product) => (dispatch, getState) => {\n  return new Promise((reslove, reject) => {\n    // send our data as a multipart/form-data instead of application/json\n    const formData = new FormData();\n    for (const x in product) {\n      if (x === \"productImage\") {\n        for (let i = 0; i < product.productImage.length; i++) {\n          formData.append(x, product.productImage[i]);\n        }\n      }\n      formData.append(\"productImage\", product.productImage);\n    }\n    formData.append(\"name\", product.name);\n    formData.append(\"description\", product.description);\n    formData.append(\"category\", product.category);\n    formData.append(\"price\", product.price);\n    formData.append(\"numberInStock\", product.numberInStock);\n\n    axios\n      .post(`/api/product/${id}/update`, formData, tokenConfig(getState))\n      .then(res => {\n        let newProduct = res.data.product;\n        let successMessage = res.data.message;\n\n        dispatch(updateProductSuccess(id, newProduct, successMessage));\n        reslove(successMessage);\n      })\n      .catch(err => {\n        let errorMessage = err.response.data.message;\n\n        dispatch(updateProductFailure(errorMessage));\n        reject(errorMessage);\n      });\n  });\n};\n\nconst updateProductSuccess = (id, newProduct, successMessage) => {\n  return {\n    type: UPDATE_PRODUCT_SUCCESS,\n    payload: {\n      id,\n      newProduct,\n      successMessage\n    }\n  };\n};\n\nconst updateProductFailure = error => {\n  return {\n    type: UPDATE_PRODUCT_FAILURE,\n    payload: {\n      error\n    }\n  };\n};\n"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,sBAAjC,QAA+D,YAA/D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,EAAD,EAAKC,OAAL,KAAiB,CAACC,QAAD,EAAWC,QAAX,KAAwB;EACpE,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;IACA,KAAK,MAAMC,CAAX,IAAgBR,OAAhB,EAAyB;MACvB,IAAIQ,CAAC,KAAK,cAAV,EAA0B;QACxB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACU,YAAR,CAAqBC,MAAzC,EAAiDF,CAAC,EAAlD,EAAsD;UACpDH,QAAQ,CAACM,MAAT,CAAgBJ,CAAhB,EAAmBR,OAAO,CAACU,YAAR,CAAqBD,CAArB,CAAnB;QACD;MACF;;MACDH,QAAQ,CAACM,MAAT,CAAgB,cAAhB,EAAgCZ,OAAO,CAACU,YAAxC;IACD;;IACDJ,QAAQ,CAACM,MAAT,CAAgB,MAAhB,EAAwBZ,OAAO,CAACa,IAAhC;IACAP,QAAQ,CAACM,MAAT,CAAgB,aAAhB,EAA+BZ,OAAO,CAACc,WAAvC;IACAR,QAAQ,CAACM,MAAT,CAAgB,UAAhB,EAA4BZ,OAAO,CAACe,QAApC;IACAT,QAAQ,CAACM,MAAT,CAAgB,OAAhB,EAAyBZ,OAAO,CAACgB,KAAjC;IACAV,QAAQ,CAACM,MAAT,CAAgB,eAAhB,EAAiCZ,OAAO,CAACiB,aAAzC;IAEArB,KAAK,CACFsB,IADH,CACS,gBAAenB,EAAG,SAD3B,EACqCO,QADrC,EAC+CT,WAAW,CAACK,QAAD,CAD1D,EAEGiB,IAFH,CAEQC,GAAG,IAAI;MACX,IAAIC,UAAU,GAAGD,GAAG,CAACE,IAAJ,CAAStB,OAA1B;MACA,IAAIuB,cAAc,GAAGH,GAAG,CAACE,IAAJ,CAASE,OAA9B;MAEAvB,QAAQ,CAACwB,oBAAoB,CAAC1B,EAAD,EAAKsB,UAAL,EAAiBE,cAAjB,CAArB,CAAR;MACAnB,OAAO,CAACmB,cAAD,CAAP;IACD,CARH,EASGG,KATH,CASSC,GAAG,IAAI;MACZ,IAAIC,YAAY,GAAGD,GAAG,CAACE,QAAJ,CAAaP,IAAb,CAAkBE,OAArC;MAEAvB,QAAQ,CAAC6B,oBAAoB,CAACF,YAAD,CAArB,CAAR;MACAvB,MAAM,CAACuB,YAAD,CAAN;IACD,CAdH;EAeD,CAhCM,CAAP;AAiCD,CAlCM;;AAoCP,MAAMH,oBAAoB,GAAG,CAAC1B,EAAD,EAAKsB,UAAL,EAAiBE,cAAjB,KAAoC;EAC/D,OAAO;IACLQ,IAAI,EAAErC,sBADD;IAELsC,OAAO,EAAE;MACPjC,EADO;MAEPsB,UAFO;MAGPE;IAHO;EAFJ,CAAP;AAQD,CATD;;AAWA,MAAMO,oBAAoB,GAAGG,KAAK,IAAI;EACpC,OAAO;IACLF,IAAI,EAAEpC,sBADD;IAELqC,OAAO,EAAE;MACPC;IADO;EAFJ,CAAP;AAMD,CAPD"},"metadata":{},"sourceType":"module"}